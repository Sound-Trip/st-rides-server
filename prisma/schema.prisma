generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(cuid())
  firstName           String               @map("first_name")
  lastName            String               @map("last_name")
  phone               String?              @unique
  email               String?              @unique
  passwordHash        String?              @map("password_hash")
  role                UserRole
  isActive            Boolean              @default(true) @map("is_active")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  driverProfile       DriverProfile?
  driverSchedules     DriverSchedule[]
  maintenanceRequests MaintenanceRequest[]
  notifications       Notification[]
  otpCodes            OtpCode[]
  passengerProfile    PassengerProfile?
  ridePassengers      RidePassenger[]
  rideRequests        RideRequest[]
  ridesAsDriver       Ride[]               @relation("DriverRides")
  walletTransactions  WalletTransaction[]

  @@map("users")
}

model DriverProfile {
  userId              String      @id @map("user_id")
  vehicleType         VehicleType @map("vehicle_type")
  vehicleModel        String      @map("vehicle_model")
  plateNumber         String      @map("plate_number")
  busVariantId        String?
  licenseNumber       String      @map("license_number")
  profilePhotoUrl     String?     @map("profile_photo_url")
  assignedRouteId     String?     @map("assigned_route_id")
  isCompanyVehicle    Boolean     @default(false) @map("is_company_vehicle")
  lastMaintenanceDate DateTime?   @map("last_maintenance_date")
  maintenanceDueDate  DateTime?   @map("maintenance_due_date")
  isBlocked           Boolean     @default(false) @map("is_blocked")
  walletBalance       Decimal     @default(0) @map("wallet_balance") @db.Decimal(10, 2)
  totalEarnings       Decimal     @default(0) @map("total_earnings") @db.Decimal(10, 2)
  rating              Decimal?    @db.Decimal(3, 2)
  totalRides          Int         @default(0) @map("total_rides")
  createdAt           DateTime    @default(now()) @map("created_at")
  updatedAt           DateTime    @updatedAt @map("updated_at")
  isOnline            Boolean     @default(false) @map("is_online")
  isAvailable         Boolean     @default(true) @map("is_available")
  currentLat          Float?      @map("current_lat")
  currentLng          Float?      @map("current_lng")
  lastPingAt          DateTime?   @map("last_ping_at")
  assignedRoute       Route?      @relation(fields: [assignedRouteId], references: [id])
  busVariant          BusVariant? @relation(fields: [busVariantId], references: [id])
  user                User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([isOnline, isAvailable])
  @@index([currentLat, currentLng])
  @@map("driver_profiles")
}

model PassengerProfile {
  userId          String   @id @map("user_id")
  profilePhotoUrl String?  @map("profile_photo_url")
  walletBalance   Decimal  @default(0) @map("wallet_balance") @db.Decimal(10, 2)
  earnedTokens    Int      @default(0) @map("earned_tokens")
  rating          Decimal? @db.Decimal(3, 2)
  totalRides      Int      @default(0) @map("total_rides")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("passenger_profiles")
}

model BusVariant {
  id       String          @id @default(cuid())
  name     String
  capacity Int
  baseFare Decimal         @db.Decimal(8, 2)
  drivers  DriverProfile[]

  @@map("bus_variants")
}

model Junction {
  id             String           @id @default(cuid())
  name           String           @unique
  lat            Float
  lng            Float
  endSchedules   DriverSchedule[] @relation("SchedEndJunction")
  startSchedules DriverSchedule[] @relation("SchedStartJunction")
  routesAsEnd    Route[]          @relation("EndJunction")
  routesAsStart  Route[]          @relation("StartJunction")

  @@map("junctions")
}

model Route {
  id              String          @id @default(cuid())
  vehicleType     VehicleType
  basePrice       Decimal         @db.Decimal(8, 2)
  estimatedTime   Int?
  distance        Decimal?        @db.Decimal(8, 2)
  isActive        Boolean         @default(true)
  startJunctionId String?
  endJunctionId   String?
  startLat        Float?
  startLng        Float?
  endLat          Float?
  endLng          Float?
  driverProfiles  DriverProfile[]
  rides           Ride[]
  endJunction     Junction?       @relation("EndJunction", fields: [endJunctionId], references: [id])
  startJunction   Junction?       @relation("StartJunction", fields: [startJunctionId], references: [id])

  @@index([vehicleType])
  @@map("routes")
}

model Ride {
  id                String          @id @default(cuid())
  routeId           String?
  driverId          String?
  isChattered       String?
  rideType          RideType
  vehicleType       VehicleType
  status            RideStatus      @default(PENDING)
  pickupTime        DateTime?
  scheduledByDriver Boolean         @default(false)
  capacity          Int?
  seatsFilled       Int             @default(0) @map("seats_filled")
  requestedStartLat Float?
  requestedStartLng Float?
  requestedEndLat   Float?
  requestedEndLng   Float?
  startJunctionId   String?
  endJunctionId     String?
  scanCode          String          @unique
  shortCode         String
  startTime         DateTime?
  endTime           DateTime?
  totalAmount       Decimal         @default(0) @db.Decimal(8, 2)
  commission        Decimal         @default(0) @db.Decimal(8, 2)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  passengers        RidePassenger[]
  driver            User?           @relation("DriverRides", fields: [driverId], references: [id])
  route             Route?          @relation(fields: [routeId], references: [id])

  @@index([status])
  @@map("rides")
}

model RidePassenger {
  id            String        @id @default(cuid())
  rideId        String
  passengerId   String
  paymentMethod PaymentMethod
  pricePaid     Decimal       @db.Decimal(8, 2)
  rated         Boolean       @default(false)
  rating        Int?
  feedback      String?
  ticketCode    String
  scanCode      String        @unique
  passenger     User          @relation(fields: [passengerId], references: [id])
  ride          Ride          @relation(fields: [rideId], references: [id])

  @@unique([rideId, passengerId])
  @@map("ride_passengers")
}

model RideRequest {
  id              String            @id @default(cuid())
  passengerId     String
  vehicleType     VehicleType
  isChattered     String?
  rideType        RideType
  startJunctionId String?
  endJunctionId   String?
  startLat        Float?
  startLng        Float?
  endLat          Float?
  endLng          Float?
  scheduledFor    DateTime?
  status          RideRequestStatus @default(PENDING)
  seatsNeeded     Int               @default(1)
  priceQuoted     Decimal?          @db.Decimal(10, 2)
  expiresAt       DateTime?
  createdAt       DateTime          @default(now())
  acceptedRideId  String?
  passenger       User              @relation(fields: [passengerId], references: [id])

  @@index([vehicleType, rideType, status])
  @@map("ride_requests")
}

model DriverSchedule {
  id              String      @id @default(cuid())
  driverId        String
  vehicleType     VehicleType
  startJunctionId String
  endJunctionId   String
  departureTime   DateTime
  capacity        Int         @default(4)
  seatsFilled     Int         @default(0)
  isActive        Boolean     @default(true)
  createdAt       DateTime    @default(now())
  driver          User        @relation(fields: [driverId], references: [id])
  endJunction     Junction    @relation("SchedEndJunction", fields: [endJunctionId], references: [id])
  startJunction   Junction    @relation("SchedStartJunction", fields: [startJunctionId], references: [id])

  @@index([startJunctionId, endJunctionId, departureTime])
  @@map("driver_schedules")
}

model WalletTransaction {
  id          String            @id @default(cuid())
  userId      String            @map("user_id")
  amount      Decimal           @db.Decimal(10, 2)
  type        TransactionType
  status      TransactionStatus @default(PENDING)
  description String?
  reference   String?           @unique
  rideId      String?           @map("ride_id")
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")
  user        User              @relation(fields: [userId], references: [id])

  @@map("wallet_transactions")
}

model MaintenanceRequest {
  id            String            @id @default(cuid())
  driverId      String            @map("driver_id")
  requestedDate DateTime          @map("requested_date")
  approvedDate  DateTime?         @map("approved_date")
  completedDate DateTime?         @map("completed_date")
  status        MaintenanceStatus @default(REQUESTED)
  description   String?
  cost          Decimal?          @db.Decimal(8, 2)
  approvedBy    String?           @map("approved_by")
  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime          @updatedAt @map("updated_at")
  driver        User              @relation(fields: [driverId], references: [id])

  @@map("maintenance_requests")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String           @map("user_id")
  type      NotificationType
  title     String
  body      String
  isRead    Boolean          @default(false) @map("is_read")
  via       String
  metadata  Json?
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @updatedAt @map("updated_at")
  user      User             @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model OtpCode {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  code      String
  type      String
  expiresAt DateTime @map("expires_at")
  isUsed    Boolean  @default(false) @map("is_used")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id])

  @@map("otp_codes")
}

model AdminUser {
  id           String    @id @default(cuid())
  email        String    @unique
  passwordHash String    @map("password_hash")
  role         String    @default("ADMIN")
  permissions  String[]
  isActive     Boolean   @default(true) @map("is_active")
  lastLogin    DateTime? @map("last_login")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  @@map("admin_users")
}

model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("system_config")
}

enum UserRole {
  PASSENGER
  DRIVER
  ADMIN
  SUPPORT_AGENT
}

enum VehicleType {
  KEKE
  CAR
  BUS
}

enum RideStatus {
  PENDING
  SCHEDULED
  ONGOING
  COMPLETED
  CANCELLED
}

enum RideType {
  SHARED
  PRIVATE
}

enum PaymentMethod {
  WALLET
  CASH
  TOKEN
}

enum TransactionType {
  CREDIT
  DEBIT
  COMMISSION
  CASHOUT
  TOKEN_REWARD
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}

enum MaintenanceStatus {
  REQUESTED
  APPROVED
  COMPLETED
  OVERDUE
}

enum NotificationType {
  PUSH
  SMS
  EMAIL
}

enum RideRequestStatus {
  PENDING
  MATCHING
  ACCEPTED
  EXPIRED
  CANCELLED
}
